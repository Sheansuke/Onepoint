// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
  binaryTargets   = ["native", "linux-musl","debian-openssl-1.1.x"]
  
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int              @id @default(autoincrement())
  clerkId         String           @unique @default("")
  email           String           @unique @default("")
  role            UserRole         @relation(fields: [userRoleId], references: [id])
  userRoleId      Int
  order           Order[]
  deliveryAddress DeliveryAddress?
  createAt        DateTime?        @default(now())
}

model DeliveryAddress {
  id             Int    @id @default(autoincrement())
  user           User   @relation(fields: [userId], references: [id])
  userId         Int    @unique
  name           String
  lastName       String
  sector         String
  street         String
  referencePlace String
  phone          String
}

model UserRole {
  id   Int    @id @default(autoincrement())
  name String @unique @default("cliente")
  User User[]
}

model Product {
  id          Int      @id @default(autoincrement())
  title       String   @unique @default("")
  slug        String   @unique @default("")
  description String
  imageUrl    String
  price       Int
  productCost Int?     @default(0)
  inStock     Int
  tags        String[]
}

model Order {
  id            String      @id @default(uuid())
  user          User        @relation(fields: [userId], references: [id])
  userId        Int
  items         Json[]
  numberOfItems Int
  subTotal      Int
  tax           Float
  total         Int
  status        OrderStatus @relation(fields: [orderStatusId], references: [id])
  orderStatusId Int
  paymentType   PaymentType @relation(fields: [paymentTypeId], references: [id])
  paymentTypeId Int
  deliveryDate  DateTime?
  isPaid        Boolean
  paidAt        DateTime?
  createAt      DateTime?   @default(now())
  transactionId String?
}

model OrderStatus {
  id    Int     @id @default(autoincrement())
  name  String  @unique @default("pendiente")
  order Order[]
}

model PaymentType {
  id    Int     @id @default(autoincrement())
  name  String  @unique @default("efectivo contra entrega")
  Order Order[]
}
